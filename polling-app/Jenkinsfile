def project_token = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEF'
def branchName = env.BRANCH_NAME
def buildNum = env.BUILD_NUMBER 


properties([
    gitLabConnection('gitlab_connection'),
    pipelineTriggers([
        [
            $class: 'GitLabPushTrigger',
            branchFilterType: 'All',
            triggerOnPush: true,
            triggerOnMergeRequest: true,
            triggerOpenMergeRequestOnPush: "never",
            triggerOnNoteRequest: true,
            noteRegex: "Jenkins please retry a build",
            skipWorkInProgressMergeRequest: true,
            secretToken: project_token,
            ciSkip: false,
            setBuildDescription: true,
            addNoteOnMergeRequest: true,
            addCiMessage: true,
            addVoteOnMergeRequest: true,
            acceptMergeRequestOnSuccess: true,
            branchFilterType: "NameBasedFilter",
            includeBranchesSpec: "${branchName}",
            excludeBranchesSpec: "",
        ]
    ])
])

node(){
  try{

    /* Récupération du dépôt git applicatif */
    stage('SERVICE - Git checkout'){
      git branch: branchName, url: "http://gitlab.example.com/mypipeline/polling-app.git"
    }

    /* déterminer l'extension */
    if (branchName == "dev" ){
      extension = "-SNAPSHOT"
      ip = "192.168.10.3"
    }
    if (branchName == "stage" ){
      extension = "-RC"
      ip = "192.168.10.7"
    }
    if (branchName == "master" ){
      extension = ""
      ip = "192.168.10.4"
    }

    /* Récupération du commitID */
    def commitIdLong = sh returnStdout: true, script: 'git rev-parse HEAD'
    def commitId = commitIdLong.take(7)

    def version = "0.0.1" + "${extension}"

    /* Modification de la version dans le pom.xml */
    sh "sed -i s/'-XXX'/${extension}/g polling-app-server/pom.xml"

    /* Modification IP du serveur selon l'environnement */
    sh "sed -i s/'XXX'/${ip}/g polling-app-client/src/constants/index.js"

     print """
     #################################################
        BanchName: $branchName
        CommitID: $commitId
        AppVersion: $version
        JobNumber: $buildNum
     #################################################
        """

    /* Docker compose - UP */
    stage('ENV - Docker up'){
      sh 'docker-compose up -d'
      sh "docker ps -a" 
    }

    /* Docker - push */
    def imageNameClient='192.168.10.5:5000/polling-app-client'
    def imageNameServer='192.168.10.5:5000/polling-app-server'

    stage('DOCKER - Build/Push registry'){
      docker.withRegistry('http://192.168.10.5:5000', 'myregistry_login') {
          def customImageClient = docker.build("$imageNameClient:${version}-${commitId}", "-f polling-app-client/Dockerfile .")
          customImageClient.push()
          def customImageServer = docker.build("$imageNameServer:${version}-${commitId}", "-f polling-app-server/Dockerfile .")
          customImageServer.push()
      }
      sh "docker rmi $imageNameClient:${version}-${commitId}"
      sh "docker rmi $imageNameServer:${version}-${commitId}"
    }

    /* Docker - test */
    stage('DOCKER - check registry'){
      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'myregistry_login',usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
      sh 'curl -sk --user $USERNAME:$PASSWORD https://192.168.10.5:5000/v2/polling-app-client/tags/list'
      sh 'curl -sk --user $USERNAME:$PASSWORD https://192.168.10.5:5000/v2/polling-app-server/tags/list'
      }
    }

    stage('ANSIBLE - Deploy'){
        git branch: 'master', url: 'http://gitlab.example.com/mypipeline/deploy-ansible.git'
        sh "mkdir -p roles"
        sh "ansible-galaxy install --roles-path roles -r requirements.yml"
        ansiblePlaybook (
              colorized: true,
              playbook: "install-polling-app.yml",
              hostKeyChecking: false,
              inventory: "env/${branchName}/hosts",
              extras: "-u vagrant -e 'imageClient=$imageNameClient:${version}-${commitId}' -e 'imageServer=$imageNameServer:${version}-${commitId}'"
              )
    }

    stage('ENV - Docker down'){
    git branch: branchName, url: "http://gitlab.example.com/mypipeline/polling-app.git"
		sh "docker-compose down"
    }

  } finally {
    cleanWs()
  }
}