INFRA > Registry: docker / CICD: Jenkins / Dépot: Gitlab / 3 SRV (env) + BDD
https://www.callicoder.com/deploy-spring-mysql-react-nginx-kubernetes-persistent-volume-secret/


BEST PRACTICES (prod)

- Réseau : Isolation dev/stage/prod par des vlans
- Jenkins 1 par environnement avec droits SSH exclusifs + slaves (à configurer dans nodes)
- BDD 1 par environnement + secure pg_hba/listen + gestion droits sql/users + backup/réplication
- Serveur de dépot pour installations de package (mirroring)
- WEB : reverse-proxy, load balancing, mesh
- Gestion des droits gitlab par groupe
- Securité (ssl, authentification, check images, rules firewall, vault + encrypted ansible, expositions, versions...)
- Ne pas executer des jobs jenkins en root
- Test sur STAGE avec Jmeter
- Ne pas ajouter de trigger dev>stage>prod auto
- Registry : LDAP
- domaine public dédié au backend
- monitoring/logs

Pour pouvoir utiliser la registry de maniere securisée, il faut copier le certificat myregistry.crt sur le serveur jenkins dans le repertoire /usr/local/share/ca-certificates  Puis faire un update-ca-certificates, ne pas oublier de supprimer le daemon.json sur le serveur jenkins. Ajouter une entrée dans le /etc/hosts du jenkins de votre CN, ici myregistry.my qui pointe sur l'@ip du serveur Registry, ici 192.168.10.5. Modifier le fichier Jenkisfile.groovy pour faire du https://myregistry.my au lieu de http://192.168.10.5

Autoriser l'accès seulement à un domaine via les CORS : 

- Ajouter un header "Access-Control-Allow-Origin" dans le fichier nginx.conf
- Modifier "app.cors.allowedOrigins" par la valeur souhaitée dans le fichier application.properties

Automatisation avec JCasC plugin (https://github.com/jenkinsci/configuration-as-code-plugin/blob/master/README.md)

TEST LOCAL

docker
> Erreur build docker : utiliser maven:3.3-jdk-8 et la commande mvn (voir dockerfile) + changer version java 1.8 pom.xml OK
> Failed to fetch : changer le port frontend en 3000 + jdbc allowPublicKeyRetrieval=true OK
> curl localhost:3000 localhost:8081 (8080 est utilisé par jenkins) OK

------------------------------

PROCEDURE


Gitlab

- default password root gitlab : cat /etc/gitlab/initial_root_password
- verif : gitlab-ctl status / swapon -s
- mdp root/r00tr00t et naqa/n@qan@qa

CFG HOOK 

- (root) settings > Network > Outbound requests
- Cocher allow webhooks + ajouter ip jenkins (192.168.10.2)

log as naqa + creation groupe (MyPipeline, public)

MISE EN PLACE DU DEPOT

git init
git add .
git commit -m "init"
creation projet (public) polling-app (user:naqa) + copier le git remote (le dossier contient client+server+jenkinsfile)

GENERATION CLE SSH GITLAB

- ssh-keygen
- Copier le contenu de id_rsa.pub
- Coller dans SSH Keys (interface web : profile>preferences>ssh). S'il y a toujours un mdp : modifier l'url dans .git/config par git@url (bouton clone bleu)

git push -u origin master
git branch dev / git checkout dev / git push -u origin dev
git branch stage / git checkout stage / git push -u origin stage
(pour push stage+prod : git checkout stage / git merge dev / git push)

Jenkins

- /var/lib/jenkins/secrets/initialAdminPassword + install plugins suggérés
- mdp naqa/naqa
- Installer les plug-ins suivants : gitlab, Docker Pipeline, Ansible, Jmeter performance (optionnel: job config history)
- Config > Systeme > Décocher l'authentification Gitlab
- créer MultiPipeline (ajout branch sources > git)

GENERATION CLE SSH JENKINS (bdd/dev/stage/prod) (** SCRIPTABLE SUR VAGRANT, voir sshgen k0s)

- login jenkins : sudo su - jenkins
- ssh-keygen
- ssh-copy-id -i .ssh/id_rsa.pub vagrant@SERVEURCIBLE

AUTOBUILD SUR PUSH (dev/stage/prod)

- Jenkinsfile : properties
- Créer un Project Hook sur Gitlab : settings > webhook (url + secrets dispo dans la config de la branche sur jenkins)
- push events ON et SSL OFF

CREDENTIALS (pour registry)
- Config > Credentials > global (mettre la variable myregistry_login dans ID)

---------------------

Mise en place CI/CD : Jenkinsfile

- SERVICE GIT CHECKOUT (dev/stage/prod) - OK + modif pom.xml variable XXX OK
- ENV DOCKER UP (docker-compose frontend,backend,mysql) - OK
- BUILD/PUSH (registry) - OK
- CHECK REGISTRY (curl registry) - OK

- DEPLOY (ansible)

Configuration des fichiers yaml : deploy ansible + services (docker,mysql,install_run) - OK
Push des 4 dossiers sur gitlab
Ajout sur Jenkinsfile

DEPLOY ANSIBLE OK
DOCKER OK
MYSQL : OK
INSTALL RUN : OK

> Probleme de droits avec docker : relancer le serveur jenkins OK
> Error: Could not find or load main class com.example.polls.PollsApplication : ne pas rechanger le workdir de base (/app) OK
> connection refused : bind address + pb droits mysql OK
> crash (restart always) + OOM (1Go) OK
> failed to fetch (192.168.10.3:3000) : REACT_APP_API_BASE_URL du index.js switch localhost to IPENV OK